{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{152:function(n,e,t){\"use strict\";t.r(e);var o=t(0),a=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"div\",{staticClass:\"content\"},[t(\"h1\",{attrs:{id:\"patch阶段组件处理相关逻辑\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#patch阶段组件处理相关逻辑\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" patch阶段组件处理相关逻辑\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"createelm\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#createelm\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" createElm\")]),n._v(\" \"),t(\"p\",[n._v(\"createElm ( vnode, insertedVnodeQueue, parentElm, refElm, nested,ownerArray, index )\")]),n._v(\" \"),t(\"p\",[n._v(\"core/vdom/patch.js\")]),n._v(\" \"),t(\"p\",[n._v(\"该函数的作用就是 为vnode生成真实的dom (被保存到了 vnode.elm 中)， 并把真实的dom插入到 parentElm 中\")]),n._v(\" \"),t(\"p\",[n._v(\"并且保证在 refElm 之前\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"function createElm (\\n    vnode,\\n    insertedVnodeQueue,\\n    parentElm,\\n    refElm,\\n    nested,\\n    ownerArray,\\n    index\\n  ) {\\n    // 如果 vnode 是一个组件的话，直接由 createComponent 处理\\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\\n      return\\n    }\\n  }\\n\")])])]),t(\"h2\",{attrs:{id:\"createcomponent\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#createcomponent\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" createComponent\")]),n._v(\" \"),t(\"p\",[n._v(\"core/vdom/patch.js\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\\n    let i = vnode.data\\n    if (isDef(i)) {\\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\\n      \\t// 调用 init 钩子，这个钩子具体干了点什么呢？请看下一小节\\n      \\t// 如果 vnode 是一个子组件的话\\n        // 会创建一个子实例 componentInstance 并且 mount 它。\\n        i(vnode, false /* hydrating */)\\n      }\\n      // after calling the init hook, if the vnode is a child component\\n      // it should've created a child instance and mounted it. the child\\n      // component also has set the placeholder vnode's elm.\\n      // in that case we can just return the element and be done.\\n      // 上面的注释说的很清楚。init 钩子被调用之后，如果 vnode 是一个子组件的话\\n      // 会创建一个子实例 componentInstance 并且 mount 它。\\n      // componentInstance 就是一个 vm 对象\\n      if (isDef(vnode.componentInstance)) {\\n      \\t// 我们知道 mount 完之后，componentInstance.$el 就是真实的 dom\\n      \\t// 下面这个方法的作用就是 vnode.elm = vnode.componentInstance.$el\\n        initComponent(vnode, insertedVnodeQueue)\\n        insert(parentElm, vnode.elm, refElm)\\n        return true\\n      }\\n    }\\n  }\\n\")])])]),t(\"h2\",{attrs:{id:\"init-钩子\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#init-钩子\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" init 钩子\")]),n._v(\" \"),t(\"p\",[n._v(\"core/vdom/create-component.js\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"const componentVNodeHooks = {\\n  init (vnode: VNodeWithData, hydrating: boolean): ?boolean {\\n    if (\\n      vnode.componentInstance &&\\n      !vnode.componentInstance._isDestroyed &&\\n      vnode.data.keepAlive\\n    ) {\\n      // kept-alive components, treat as a patch\\n      const mountedNode: any = vnode // work around flow\\n      componentVNodeHooks.prepatch(mountedNode, mountedNode)\\n    } else {\\n      const child = vnode.componentInstance = createComponentInstanceForVnode(\\n        vnode,\\n        activeInstance\\n      )\\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating)\\n    }\\n  }\\n}\\n\")])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"// 为Vnode创建组件实例，名称起的很清楚\\nexport function createComponentInstanceForVnode (\\n  vnode: any, // we know it's MountedComponentVNode but flow doesn't\\n  parent: any, // activeInstance in lifecycle state\\n): Component {\\n  // 这里传入了 parent，parent 指的父级 vm\\n  const options: InternalComponentOptions = {\\n    _isComponent: true,\\n    _parentVnode: vnode,\\n    parent\\n  }\\n  return new vnode.componentOptions.Ctor(options)\\n}\\n\")])])]),t(\"h2\",{attrs:{id:\"initcomponent\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#initcomponent\",\"aria-hidden\":\"true\"}},[n._v(\"#\")]),n._v(\" initComponent\")]),n._v(\" \"),t(\"p\",[n._v(\"core/vdom/patch.js\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"function initComponent (vnode, insertedVnodeQueue) {\\n\\t// 删除了一些次要逻辑\\n    vnode.elm = vnode.componentInstance.$el\\n}\\n\")])])])])}],!1,null,null,null);a.options.__file=\"组件patch阶段.md\";e.default=a.exports}}]);","extractedComments":[]}